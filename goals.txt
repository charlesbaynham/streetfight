Goals
-----

- [x]: Finish admin interface to add user to team
- [x]: Users should be required to set their name
    - [x] Python API
    - [x] Frontend
- [?]: Users should be able to join teams / be added to teams
    - [x] Default teams for setup
    - [x] Admin interface
    - [ ] QR code interface?
- [x]: User interfaces should update without reloads
    - [x] Long-poll for user hash?
    - [x] Changes from AdminInterface should bump users where required
- [ ] Shooting should have a timeout (at least until the POST completes)
- [x]: Dead users should not be able to shoot
    - [x] UI (state already exists)
    - [x] Backend validation
- [x]: Dead users should know that they are dead!
    - [x] UI (state already exists)
    - [x] Backend validation
- [x]: Users should be able to collect pickups
    - [x] QR codes in react working
    - [x] Decide QR code encoding scheme - keep it flexible
    - [x] Backend for collecting pickups from QR codes
    - [x] Admin backend for creating new pickups
    - [x] Admin frontend
- [x]: Admins should be able to award health
    - [x] Backend
    - [x] Admin UI
- [x]: Admins should be able to kill
    - [x] Backend
    - [x] Admin UI
- [ ]: The admin interface should help the admins decide if someone was shot or not
    - [ ] Overlay crosshair on photos
    - [ ] Add zoomed view of centre
- [ ] Keep all photos as files
- [ ] Polish:
  - [x] Fix that scanning a QR code doesn't animate
  - [x] The user interface looks awful - it shouldn't
  - [ ] Users should not have access to the camera interface until they have been added to a team
  - [x] Dump scan mode
  - [x] Have a QR reader running in javascript so people don't need to switch to their cameras
  - [ ] Users need more feedback - animations and things to make them feel like something happened
  - [ ] Bulk generation of QR codes
  - [ ] I should be able to pause / resume games from admin mode
  - [ ] Get fullscreen working again
  - [ ] Dark souls "You died"
  - [x] Add ticker of events (x shot y, y missed)
  - [ ] Black and white camera when dead
  - [x] Add sounds!
  - [ ] Public scoreboard
  - [ ] 10 minutes timeout to be revived, then you are dead dead
Essential:
  - [ ] Sort out HTTPS / production server

Notes:

## Production

I have the dev server set up to serve HTTPS via self-signed certificates. Currently, the "prod" server also uses those same ssl certificates and serves over HTTPS. This is fine and will work, but will require me to handle my own HTTPS certificates in the real world. If I want to ignore this, I should set the prod server to serve over HTTPS instead and then set up some sort of reverse proxy that handle the HTTPS, probably using nginx + LetsEncrypt. Alternatively, I might be able to find a platform which can just handle this for me. Apparantly AWS does this, but I haven't explored it yet.

Best option I think is to export it all as a docker image that serves everything on e.g. port 8000 and use a cloud service that rewrites this to HTTPS.

See also : Caddy


Backburner:

- [x] Admin interface UI should also auto-update
- [ ]: The admin interface should have a password
- [ ]: Users should be able to send items to other users (on their team? only bullets?)
- [ ] Websockets: Having the game open in multiple tabs, I sometimes hit the browser persistent connections limit

  More info: it seems to be to do with having both types of long-polling requests simultaneously. To trigger the problem:
  1. Open the admin interface and the user interface
  2. Add the user to a team
  3. Refresh the admin interface
  4. See that it takes 20s for the interface to update because the update waits until the user view's timeout expires

  Oddness: This goes away when the user interface is connected to a different
  hostname! E.g. using localhost on the admin view and 10.x.x.x on the user
  view. It comes back when they are the same.

  It's always admin_list_games that hangs - admin_make_new_item is fine

  The hang only happens when the UI is refreshed for the first time. Once the timeout has happened it's all fine. Maybe because react submits 3x requests for the first view?

  Even while it's hanging, I can successfully query admin_list_games from the docs interface (despite using the proxied version)

  It only seems to be a problem when I'm acting as a user and an admin from the same computer. Straaaaaange.

  Even making 6x windows to request 3x of each hash and then using a 7th window to query admin_list_games it's fine from the docs interface.

  It doesn't happen when I use a different browser for admin vs user mode. Firefox bug???

  It doesn't happen when I use Chrome for both windows... Firefox bug...

  Holy crap! see https://stackoverflow.com/questions/985431/max-parallel-http-connections-in-a-browser
  It seems like there's a maximum limit of open connections to a server. In firefox it's 2, in chrome it's 6. WTF. Apparantly there's a spec in HTTP1.1 RTC requiring 2x max (firefox conforms, the others ignore it).
  Also see https://www.stackpath.com/edge-academy/what-is-domain-sharding/ for annoying workarounds that this necessitates.

  "Section 8.1.4 of the HTTP/1.1 RFC says a “single-user client SHOULD NOT maintain more than 2 connections with any server or proxy.” The key here is the word “should.” Web clients don’t have to follow this guideline. IE8 isn’t the first to exceed this guideline. Opera and Safari hold that honor supporting 4 connections per server. "

  Confirmed: changing max-persistent-connections-per-server in about:config fixes the bug. :(

  Summary: If I care, the solution is WebSockets. If I don't the solution is ignore it. Should be fine - modern browsers seem to handle 6x connections OK which is fine for all my users.
